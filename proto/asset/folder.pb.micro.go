// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/asset/folder.proto

package asset

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FolderService service

type FolderService interface {
	AddOne(ctx context.Context, in *ReqFolderAdd, opts ...client.CallOption) (*ReplyFolderInfo, error)
	UpdateBase(ctx context.Context, in *ReqFolderUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFolderInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFolderList, error)
	GetListBy(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyFolderList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateBy(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	AppendContents(ctx context.Context, in *ReqFolderAppend, opts ...client.CallOption) (*ReplyFolderContents, error)
	SubtractContents(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyFolderContents, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyFolderList, error)
}

type folderService struct {
	c    client.Client
	name string
}

func NewFolderService(name string, c client.Client) FolderService {
	return &folderService{
		c:    c,
		name: name,
	}
}

func (c *folderService) AddOne(ctx context.Context, in *ReqFolderAdd, opts ...client.CallOption) (*ReplyFolderInfo, error) {
	req := c.c.NewRequest(c.name, "FolderService.AddOne", in)
	out := new(ReplyFolderInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) UpdateBase(ctx context.Context, in *ReqFolderUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "FolderService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "FolderService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFolderInfo, error) {
	req := c.c.NewRequest(c.name, "FolderService.GetOne", in)
	out := new(ReplyFolderInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFolderList, error) {
	req := c.c.NewRequest(c.name, "FolderService.Search", in)
	out := new(ReplyFolderList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) GetListBy(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyFolderList, error) {
	req := c.c.NewRequest(c.name, "FolderService.GetListBy", in)
	out := new(ReplyFolderList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "FolderService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) UpdateBy(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "FolderService.UpdateBy", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) AppendContents(ctx context.Context, in *ReqFolderAppend, opts ...client.CallOption) (*ReplyFolderContents, error) {
	req := c.c.NewRequest(c.name, "FolderService.AppendContents", in)
	out := new(ReplyFolderContents)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) SubtractContents(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyFolderContents, error) {
	req := c.c.NewRequest(c.name, "FolderService.SubtractContents", in)
	out := new(ReplyFolderContents)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "FolderService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyFolderList, error) {
	req := c.c.NewRequest(c.name, "FolderService.GetByFilter", in)
	out := new(ReplyFolderList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FolderService service

type FolderServiceHandler interface {
	AddOne(context.Context, *ReqFolderAdd, *ReplyFolderInfo) error
	UpdateBase(context.Context, *ReqFolderUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyFolderInfo) error
	Search(context.Context, *RequestInfo, *ReplyFolderList) error
	GetListBy(context.Context, *RequestFilter, *ReplyFolderList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateBy(context.Context, *RequestUpdate, *ReplyInfo) error
	AppendContents(context.Context, *ReqFolderAppend, *ReplyFolderContents) error
	SubtractContents(context.Context, *RequestList, *ReplyFolderContents) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyFolderList) error
}

func RegisterFolderServiceHandler(s server.Server, hdlr FolderServiceHandler, opts ...server.HandlerOption) error {
	type folderService interface {
		AddOne(ctx context.Context, in *ReqFolderAdd, out *ReplyFolderInfo) error
		UpdateBase(ctx context.Context, in *ReqFolderUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyFolderInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyFolderList) error
		GetListBy(ctx context.Context, in *RequestFilter, out *ReplyFolderList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateBy(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		AppendContents(ctx context.Context, in *ReqFolderAppend, out *ReplyFolderContents) error
		SubtractContents(ctx context.Context, in *RequestList, out *ReplyFolderContents) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyFolderList) error
	}
	type FolderService struct {
		folderService
	}
	h := &folderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FolderService{h}, opts...))
}

type folderServiceHandler struct {
	FolderServiceHandler
}

func (h *folderServiceHandler) AddOne(ctx context.Context, in *ReqFolderAdd, out *ReplyFolderInfo) error {
	return h.FolderServiceHandler.AddOne(ctx, in, out)
}

func (h *folderServiceHandler) UpdateBase(ctx context.Context, in *ReqFolderUpdate, out *ReplyInfo) error {
	return h.FolderServiceHandler.UpdateBase(ctx, in, out)
}

func (h *folderServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.FolderServiceHandler.RemoveOne(ctx, in, out)
}

func (h *folderServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyFolderInfo) error {
	return h.FolderServiceHandler.GetOne(ctx, in, out)
}

func (h *folderServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyFolderList) error {
	return h.FolderServiceHandler.Search(ctx, in, out)
}

func (h *folderServiceHandler) GetListBy(ctx context.Context, in *RequestFilter, out *ReplyFolderList) error {
	return h.FolderServiceHandler.GetListBy(ctx, in, out)
}

func (h *folderServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.FolderServiceHandler.GetStatistic(ctx, in, out)
}

func (h *folderServiceHandler) UpdateBy(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.FolderServiceHandler.UpdateBy(ctx, in, out)
}

func (h *folderServiceHandler) AppendContents(ctx context.Context, in *ReqFolderAppend, out *ReplyFolderContents) error {
	return h.FolderServiceHandler.AppendContents(ctx, in, out)
}

func (h *folderServiceHandler) SubtractContents(ctx context.Context, in *RequestList, out *ReplyFolderContents) error {
	return h.FolderServiceHandler.SubtractContents(ctx, in, out)
}

func (h *folderServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.FolderServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *folderServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyFolderList) error {
	return h.FolderServiceHandler.GetByFilter(ctx, in, out)
}
