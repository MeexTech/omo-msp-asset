// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/asset/label.proto

package asset

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LabelService service

type LabelService interface {
	AddOne(ctx context.Context, in *ReqLabelAdd, opts ...client.CallOption) (*ReplyLabelInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyLabelInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyLabelList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
}

type labelService struct {
	c    client.Client
	name string
}

func NewLabelService(name string, c client.Client) LabelService {
	return &labelService{
		c:    c,
		name: name,
	}
}

func (c *labelService) AddOne(ctx context.Context, in *ReqLabelAdd, opts ...client.CallOption) (*ReplyLabelInfo, error) {
	req := c.c.NewRequest(c.name, "LabelService.AddOne", in)
	out := new(ReplyLabelInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyLabelInfo, error) {
	req := c.c.NewRequest(c.name, "LabelService.GetOne", in)
	out := new(ReplyLabelInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "LabelService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "LabelService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyLabelList, error) {
	req := c.c.NewRequest(c.name, "LabelService.GetByFilter", in)
	out := new(ReplyLabelList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "LabelService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LabelService service

type LabelServiceHandler interface {
	AddOne(context.Context, *ReqLabelAdd, *ReplyLabelInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyLabelInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyLabelList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
}

func RegisterLabelServiceHandler(s server.Server, hdlr LabelServiceHandler, opts ...server.HandlerOption) error {
	type labelService interface {
		AddOne(ctx context.Context, in *ReqLabelAdd, out *ReplyLabelInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyLabelInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyLabelList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
	}
	type LabelService struct {
		labelService
	}
	h := &labelServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LabelService{h}, opts...))
}

type labelServiceHandler struct {
	LabelServiceHandler
}

func (h *labelServiceHandler) AddOne(ctx context.Context, in *ReqLabelAdd, out *ReplyLabelInfo) error {
	return h.LabelServiceHandler.AddOne(ctx, in, out)
}

func (h *labelServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyLabelInfo) error {
	return h.LabelServiceHandler.GetOne(ctx, in, out)
}

func (h *labelServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.LabelServiceHandler.RemoveOne(ctx, in, out)
}

func (h *labelServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.LabelServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *labelServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyLabelList) error {
	return h.LabelServiceHandler.GetByFilter(ctx, in, out)
}

func (h *labelServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.LabelServiceHandler.GetStatistic(ctx, in, out)
}
